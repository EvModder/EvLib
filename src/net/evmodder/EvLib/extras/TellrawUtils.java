package net.evmodder.EvLib.extras;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;
import java.util.UUID;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.stream.Collectors;
import org.bukkit.Bukkit;
import org.bukkit.ChatColor;
import org.bukkit.Server;
import org.bukkit.block.Banner;
import org.bukkit.block.BlockState;
import org.bukkit.block.Skull;
import org.bukkit.entity.Entity;
import org.bukkit.entity.EntityType;
import org.bukkit.entity.Player;
import org.bukkit.entity.Rabbit;
import org.bukkit.entity.TropicalFish;
import org.bukkit.entity.Villager;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.BlockStateMeta;
import org.bukkit.inventory.meta.BookMeta;
import org.bukkit.inventory.meta.PotionMeta;
import org.bukkit.inventory.meta.SkullMeta;
import org.bukkit.potion.PotionEffectType;
import org.bukkit.scoreboard.Objective;
import net.evmodder.EvLib.extras.EntityUtils.CCP;

public class TellrawUtils{
	public enum ClickEvent{// Descriptions below are from https://minecraft.gamepedia.com/Raw_JSON_text_format
		OPEN_URL,// opens value as a URL in the player's default web browser
		OPEN_FILE,// opens the value file on the user's computer
		//NOTE: "open_file" is  used in messages generated by the game (e.g. on taking a  screenshot) and cannot be used in commands or signs.
		RUN_COMMAND,// has value entered in chat as though the player typed it themselves.
					// This can be used to run commands, provided the player has the  required permissions
		CHANGE_PAGE,// can be used only in written books
		SUGGEST_COMMAND,// similar to "run_command" but it cannot be used in a written book, the text appears only in the player's chat
						// input and it is not automatically entered. Unlike insertion, this replaces the existing contents of the chat input
		COPY_TO_CLIPBOARD;// copy the value to the clipboard

		@Override public String toString(){return name().toLowerCase();}
	}
	public enum HoverEvent{
		SHOW_TEXT,// shows raw JSON text
		SHOW_ITEM,// shows the tooltip of an item that can have NBT tags
		SHOW_ENTITY;// shows an entity's name, possibly its type, and its UUID
//		SHOW_ACHIEVEMENT;// shows advancement or statistic
//		//tellraw @a {"text":"test","hoverEvent":{"action":"show_achievement","value":"minecraft:adventure/arbalistic"}}//CURRENT DOESNT WORK

		@Override public String toString(){return name().toLowerCase();}
	}
	public final static class TextClickAction{
		public final ClickEvent event;
		public final String value;
		public TextClickAction(ClickEvent event, String value){this.event = event; this.value = value;}
		@Override public boolean equals(Object other){
			return other != null && other instanceof TextClickAction
					&& ((TextClickAction)other).event.equals(event) && ((TextClickAction)other).value.equals(value);
		}
	}
	public final static class TextHoverAction{
		public final HoverEvent event;
		public final Component value;
		public TextHoverAction(HoverEvent event, Component value){this.event = event; this.value = value;}
		public TextHoverAction(HoverEvent event, String value){this.event = event; this.value = new RawTextComponent(value);}
		@Override public boolean equals(Object other){
			return other != null && other instanceof TextHoverAction
					&& ((TextHoverAction)other).event.equals(event) && ((TextHoverAction)other).value.equals(value);
		}
	}

	public enum Keybind{
		ATTACK("key.attack"), USE("key.use"),
		FORWARD("key.forward"), BACK("key.back"), LEFT("key.left"), RIGHT("key.right"), JUMP("key.jump"), SNEAK("key.sneak"), SPRINT("key.sprint"),
		OPEN_INVENTORY("key.inventory"), PICK_ITEM("key.pickItem"), DROP("key.drop"), SWAP_HANDS("key.swapHands"), OPEN_ADVANCEMENTS("key.advancements"),
		HOTBAR_1("key.hotbar.1"), HOTBAR_2("key.hotbar.2"), HOTBAR_3("key.hotbar.3"), HOTBAR_4("key.hotbar.4"), HOTBAR_5("key.hotbar.5"),
		HOTBAR_6("key.hotbar.6"), HOTBAR_7("key.hotbar.7"), HOTBAR_8("key.hotbar.8"), HOTBAR_9("key.hotbar.9"),
		CHAT("key.chat"), PLAYERLIST("key.playerlist"), COMMAND("key.command"),
		SCREENSHOT("key.screenshot"), FULLSCREEN("key.fullscreen"),
		TOGGLE_PERSPECTIVE("key.togglePerspective"), SMOOTH_CAMERA("key.smoothCamera"), SPECTATOR_OUTLINES("key.spectatorOutlines"),
		SAVE_TOOLBAR("key.saveToolbarActivator"), LOAD_TOOLBAR("key.loadToolbarActivator"),
		OPTIFINE_ZOOM("of.key.zoom");

		final String toString;
		Keybind(String toString){this.toString = toString;}
		@Override public String toString(){return toString;}
	};

	public enum Format{
		BOLD('b'), ITALIC('o'), UNDERLINED('n'), STRIKETHROUGH('m'), OBFUSCATED('k');
		final char toChar;
		Format(char toChar){this.toChar = toChar;}
//		char toChar(){return toChar;}
		static Format fromChar(char ch){
			switch(ch){
				case 'b': return Format.BOLD;
				case 'o': return Format.ITALIC;
				case 'n': return Format.UNDERLINED;
				case 'm': return Format.STRIKETHROUGH;
				case 'k': return Format.OBFUSCATED;
				default: throw new IllegalArgumentException("Unknown format char: "+ch);
			}
		}
	}

	public static RawTextComponent getCurrentColorAndFormatProperties(String str){
		String colorAndFormatsStr = TextUtils.getCurrentColorAndFormats(str).replace("ยง", "");
		if(colorAndFormatsStr.isEmpty()) return new RawTextComponent(""); // no color/format properties
		final char colorChar = colorAndFormatsStr.charAt(0);
		String color = null;
		if(colorChar == 'x'){
			color = "#"+colorAndFormatsStr.substring(1, 7);
			colorAndFormatsStr = colorAndFormatsStr.substring(7);
		}
		if(TextUtils.isSimpleColor(colorChar)){
			color = ChatColor.getByChar(colorChar).name().toLowerCase();
			colorAndFormatsStr = colorAndFormatsStr.substring(1);
		}
		final String formatsStr = colorAndFormatsStr;
		final Map<Format, Boolean> formats = color == null
			? Arrays.stream(Format.values()).collect(Collectors.toMap(f -> f, f -> formatsStr.indexOf(f.toChar) != -1))
			: colorAndFormatsStr.chars().mapToObj(c -> Format.fromChar((char)c)).collect(Collectors.toMap(f -> f, f -> true));
//		Bukkit.getLogger().info("properties for str('"+str+"'): color: "+color+", formats: "
//			+Arrays.stream(formats).map(f -> f.format.toChar+":"+f.value).collect(Collectors.joining(",", "{", "}")));
		return new RawTextComponent(/*text=*/"", /*insert=*/null, /*click=*/null, /*hover=*/null, color, formats);
	}

	// From wiki: Content tags are checked in the order: text, translate, score, selector, keybind, nbt.
	public static abstract class Component{
		final private String insertion; // When the text is shift-clicked by a player, this string is inserted in their chat input.
		final private TextClickAction clickAction;
		final private TextHoverAction hoverAction;
		final private String color;
		final private Map<Format, Boolean> formats;
		final boolean hasProperties;

		String getInsertion(){return insertion;}
		TextClickAction getClickAction(){return clickAction;}
		TextHoverAction getHoverAction(){return hoverAction;}
		public String getColor(){return color;}
		public Map<Format, Boolean> getFormats(){return formats;}

		private Component(String insertion, TextClickAction clickAction, TextHoverAction hoverAction, String color, Map<Format, Boolean> formats){
			this.insertion = insertion; this.clickAction = clickAction; this.hoverAction = hoverAction; this.color = color; this.formats = formats;
			hasProperties = insertion != null || clickAction != null || hoverAction != null || color != null || (formats != null && formats.size() > 0);
		}
		private Component(){this(/*insertion=*/null, /*clickAction=*/null, /*hoverAction=*/null, /*color=*/null, /*formats=*/null);}

		String getProperties(){
			if(!hasProperties) return "";
			StringBuilder builder = new StringBuilder();
			if(insertion != null) builder.append(",\"insertion\":\"").append(TextUtils.escape(insertion, "\"","\n")).append('"');
			if(color != null) builder.append(",\"color\":\"").append(color).append('"');
			if(formats != null && !formats.isEmpty()){
				builder.append(',').append(
						formats.entrySet().stream()
						.map(e -> new StringBuilder().append('"').append(e.getKey().toString().toLowerCase()).append("\":").append(e.getValue()).toString())
						.collect(Collectors.joining(",")));
			}
			if(clickAction != null) builder.append(",\"clickEvent\":{\"action\":\"").append(clickAction.event)
									.append("\",\"value\":\"").append(TextUtils.escape(clickAction.value, "\"","\n")).append("\"}");
			if(hoverAction != null) builder.append(",\"hoverEvent\":{\"action\":\"").append(hoverAction.event)
									.append("\",\"value\":").append(hoverAction.value.toString()).append("}");
			return builder.toString();// Starts with a comma, formerly was builder.substring(1);
		}
		// Returns null if this component could NOT possibly be a Selector matching exactly 1 target
		UUID potentialSingleMatchSelector(){
			if(this instanceof ListComponent && !((ListComponent)this).isEmpty()){
				return ((ListComponent)this).components.get(0).potentialSingleMatchSelector();
			}
			if(this instanceof SelectorComponent == false) return null;
			Object selector = ((SelectorComponent)this).selector;
			try{
				UUID uuid = selector instanceof UUID ? (UUID)selector : UUID.fromString(selector.toString());
				if(Bukkit.getEntity(uuid) != null) return uuid;
			}
			catch(IllegalArgumentException ex){};
			try{
				Class<?> clazz = Class.forName("net.evmodder.EvLib.extras.SelectorUtils.Selector");
				@SuppressWarnings("unchecked")
				Collection<Entity> entities = (Collection<Entity>)clazz.getMethod("resolve").invoke(selector);
				entities.removeIf(e -> e == null);
				if(entities.size() == 1) return entities.iterator().next().getUniqueId();
			}
			catch(Exception ex){return UUID.randomUUID();}// assume this matches an unknown single entity
			return null;
		}
		boolean samePropertiesAs(Component other){
			return (getInsertion() == null ? other.getInsertion() == null : getInsertion().equals(other.getInsertion())) &&
					(getClickAction() == null ? other.getClickAction() == null : getClickAction().equals(other.getClickAction())) &&
					(getHoverAction() == null ? other.getHoverAction() == null : getHoverAction().equals(other.getHoverAction())) &&
					(getColor() == null ? other.getColor() == null : getColor().equals(other.getColor())) &&
					(
						(getFormats() == null || getFormats().isEmpty()) ? (other.getFormats() == null || other.getFormats().isEmpty())
						: (other.getFormats() != null &&
							getFormats().entrySet().containsAll(other.getFormats().entrySet()) &&
							other.getFormats().entrySet().containsAll(getFormats().entrySet()))
					) &&
					(potentialSingleMatchSelector() == null ? other.potentialSingleMatchSelector() == null
						: potentialSingleMatchSelector().equals(other.potentialSingleMatchSelector()));
		}
		boolean overridesAllPropertiesOf(Component other){
			return (other.getInsertion() == null || getInsertion() != null) &&
					(other.getClickAction() == null || getClickAction() != null) &&
					(other.getHoverAction() == null || getHoverAction() != null) &&
					(other.getColor() == null || getColor() != null) &&
					(other.getFormats() == null || other.getFormats().isEmpty() ||
						(getFormats() != null && getFormats().keySet().containsAll(other.getFormats().keySet()))) &&
					(potentialSingleMatchSelector() == null) == (other.potentialSingleMatchSelector() == null);
		}
		// True if @other doesn't override any of the properties of this component
		boolean isPropertiesSupersetOf(Component other){
			return (other.getInsertion() == null || other.getInsertion().equals(getInsertion())) &&
					(other.getClickAction() == null || other.getClickAction().equals(getClickAction())) &&
					(other.getHoverAction() == null || other.getHoverAction().equals(getHoverAction())) &&
					(other.getColor() == null || other.getColor().equals(getColor())) &&
					(other.getFormats() == null || other.getFormats().isEmpty() ||
						(getFormats() != null && getFormats().entrySet().containsAll(other.getFormats().entrySet()))) &&
					(other.potentialSingleMatchSelector() == null || other.potentialSingleMatchSelector().equals(potentialSingleMatchSelector()));
		}

		@Override public abstract String toString();
		public abstract String toPlainText();
		abstract Component copyWithNewProperties(String insert, TextClickAction click, TextHoverAction hover, String color, Map<Format, Boolean> formats);
	};
	public final static class RawTextComponent extends Component{
		final String text;
		public RawTextComponent(String text){this.text = text;}
		public RawTextComponent(String text, String insert, TextClickAction click, TextHoverAction hover, String color, Map<Format, Boolean> formats){
			super(insert, click, hover, color, formats);
			this.text = text;
		}
		public RawTextComponent(String text, TextClickAction click){
			this(text, /*insert=*/null, click, /*hover=*/null, /*color=*/null, /*formats=*/null);
		}
		public RawTextComponent(String text, TextHoverAction hover){
			this(text, /*insert=*/null, /*click=*/null, hover, /*color=*/null, /*formats=*/null);
		}
		//tellraw @a "test"
		//tellraw @a {"text":"test"}
		//tellraw @a {"text":"test","insertion":"hi there"}

		@Override public String toPlainText(){return text;}
		@Override public String toString(){
			String escapedText = TextUtils.escape(text, "\"","\n");
			return !hasProperties
					? new StringBuilder().append('"').append(escapedText).append('"').toString()
					: new StringBuilder("{\"text\":\"").append(escapedText).append('"').append(getProperties()).append('}').toString();
		}
		@Override RawTextComponent copyWithNewProperties(String insert, TextClickAction click, TextHoverAction hover, String color, Map<Format, Boolean> formats){
			return new RawTextComponent(text, insert, click, hover, color, formats);
		}
	}
	public final static class TranslationComponent extends Component{
		final String jsonKey;
		final Component[] with; // Used to replace "%s" placeholders in the translation text.
		public String getJsonKey(){return jsonKey;}
		public Component[] getWith(){return with;}
		public TranslationComponent(String jsonKey){this.jsonKey = jsonKey; with = null;}
		public TranslationComponent(String jsonKey, Component... with){this.jsonKey = jsonKey; this.with = with;}
		public TranslationComponent(String jsonKey, Component[] with,
				String insert, TextClickAction click, TextHoverAction hover, String color, Map<Format, Boolean> formats){
			super(insert, click, hover, color, formats);
			this.jsonKey = jsonKey;
			this.with = with;
		}
		//tellraw @a {"translate":"multiplayer.player.joined","with":["EvDoc", "unused"]} -> en_us.json: "%s joined the game"

		private static Constructor<?> chatMessageConstructor, chatMessageConstructorWith;
		private static Method chatMessageGetString;
		private static boolean callNMS = true;
		private static boolean initChatMessageRefMethod(){
			Class<?> clazz;
			try{clazz = Class.forName("net.minecraft.network.chat.ChatMessage");}
			catch(ClassNotFoundException e){
				try{
					Server server = Bukkit.getServer();
					String nmsVersion = server.getClass().getDeclaredMethod("getHandle").invoke(server).getClass().getName().split("\\.")[3];
					clazz = Class.forName("net.minecraft.server."+nmsVersion+".ChatMessage");
				}
				catch(NoSuchMethodException | SecurityException | ClassNotFoundException | IllegalAccessException
						| IllegalArgumentException | InvocationTargetException e2){
					return false;
				}
			}
			try{
				chatMessageConstructor = clazz.getConstructor(String.class);
				chatMessageConstructorWith = clazz.getConstructor(String.class, Object[].class);
				chatMessageGetString = clazz.getMethod("getString");
			}
			catch(NoSuchMethodException | SecurityException e){return false;}
			return true;
		}
		@Override public String toPlainText(){
			if(callNMS){
				if(chatMessageGetString != null || (callNMS=initChatMessageRefMethod())) try{
					return (String)chatMessageGetString.invoke(with == null
							? chatMessageConstructor.newInstance(jsonKey)
							: chatMessageConstructorWith.newInstance(jsonKey, Arrays.stream(with).map(Component::toPlainText).toArray()));
				}
				catch(IllegalAccessException | IllegalArgumentException | InvocationTargetException | InstantiationException e){}
			}
			// This is ONLY correct when the key is invalid/unknown to the client!
			return with == null ? jsonKey.replace("%s", "") : String.format(jsonKey, Arrays.stream(with).map(Component::toPlainText).toArray());
		}
		@Override public String toString(){
			// For TranslationComponents that are actually just String formatters, convert to a list
			Component convertedComp = convertStringFormatters();
			if(convertedComp instanceof ListComponent) return convertedComp.toString();
			// Otherwise, proceed with toString() as a {"translate"} component
			String escapedJsonKey = TextUtils.escape(jsonKey, "\"","\n");
			StringBuilder builder = new StringBuilder().append("{\"translate\":\"").append(escapedJsonKey).append('"');
			if(with != null && with.length > 0) builder.append(",\"with\":[").append(
					Arrays.stream(with).map(Component::toString).collect(Collectors.joining(","))).append(']');
			return builder.append(getProperties()).append('}').toString();
		}
		@Override TranslationComponent copyWithNewProperties(String insert, TextClickAction click, TextHoverAction hover, String color, Map<Format, Boolean> formats){
			return new TranslationComponent(jsonKey, with, insert, click, hover, color, formats);
		}
		Component convertStringFormatters(){
			if(jsonKey.replaceAll("%s", "").trim().isEmpty()){
				ListComponent listComp = new ListComponent();
				int i = 0;
				boolean isFirstComp = true;
				for(String s : jsonKey.split("%s")){
					if(isFirstComp){
						isFirstComp = false;
						listComp.addComponent(new RawTextComponent(s, getInsertion(), getClickAction(), getHoverAction(), getColor(), getFormats()));
					}
					else if(!s.isEmpty()) listComp.addComponent(s);
					if(i < with.length) listComp.addComponent(with[i++]);
				}
				return listComp;
			}
			return this;
		}
	}

	final static String tropicalFishLocaleCCP = /*custom.tropical_fish.ccp*/"%s-%s %s";
	final static String tropicalFishLocaleCP = /*custom.tropical_fish.cp*/"%s %s";
	public static TranslationComponent getLocalizedDisplayName(CCP ccp){
		Integer id = EntityUtils.commonTropicalFishIds.get(ccp);
		if(id != null) return new TranslationComponent("entity.minecraft.tropical_fish.predefined."+id);
		return ccp.bodyColor != ccp.patternColor
			? new TranslationComponent(tropicalFishLocaleCCP, new Component[]{
				new TranslationComponent("color.minecraft."+ccp.bodyColor.name().toLowerCase()),
				new TranslationComponent("color.minecraft."+ccp.patternColor.name().toLowerCase()),
				new TranslationComponent("entity.minecraft.tropical_fish.type."+ccp.pattern.name().toLowerCase())})
			: new TranslationComponent(tropicalFishLocaleCP, new Component[]{
					new TranslationComponent("color.minecraft."+ccp.bodyColor.name().toLowerCase()),
					new TranslationComponent("entity.minecraft.tropical_fish.type."+ccp.pattern.name().toLowerCase())});
	}
	public static TranslationComponent getBestGuessLocalizedDisplayName(EntityType eType){
		switch(eType){
			case MUSHROOM_COW: return new TranslationComponent("entity.minecraft.mooshroom");
			case SNOWMAN: return new TranslationComponent("entity.minecraft.snow_golem");
			case LEASH_HITCH: return new TranslationComponent("entity.minecraft.leash_knot");
			case MINECART_TNT: return new TranslationComponent("entity.minecraft.tnt_minecart");
			case MINECART_CHEST: return new TranslationComponent("entity.minecraft.chest_minecart");
			case MINECART_HOPPER: return new TranslationComponent("entity.minecraft.hopper_minecart");
			case MINECART_FURNACE: return new TranslationComponent("entity.minecraft.furnace_minecart");
			case MINECART_COMMAND: return new TranslationComponent("entity.minecraft.command_block_minecart");
			case MINECART_MOB_SPAWNER: return new TranslationComponent("entity.minecraft.spawner_minecart");
			default:
				return new TranslationComponent("entity.minecraft."+eType.name().toLowerCase()
						.replace("pig_zombie", "zombie_pigman"));
		}
	}
	public static Component getLocalizedDisplayName(Entity entity, boolean useDisplayName){
		if(entity.getName() != null) return new RawTextComponent(
				(entity instanceof Player && useDisplayName) ? ((Player)entity).getDisplayName() : entity.getName());
		switch(entity.getType()){
			case VILLAGER:
				return new TranslationComponent("entity.minecraft."+entity.getType().name().toLowerCase()+"."
						+((Villager)entity).getProfession().name().toLowerCase());
			case RABBIT:
				return new TranslationComponent(((Rabbit)entity).getRabbitType() == Rabbit.Type.THE_KILLER_BUNNY
					? "entity.minecraft.killer_bunny"
					: "entity.minecraft.rabbit");
			case TROPICAL_FISH:
				return getLocalizedDisplayName(EntityUtils.getCCP((TropicalFish)entity));
			default:
				return getBestGuessLocalizedDisplayName(entity.getType());
		}
	}
	static String getVanillaPotionEffectTypeName(PotionEffectType type){
		switch(type.getName()){
			case "AWKWARD": return "awkward";
			case "FIRE_RESISTANCE": return "fire_resistance";
			case "INSTANT_DAMAGE": return "harming";
			case "INSTANT_HEAL": return "healing";
			case "INVISIBILITY": return "invisibility";
			case "JUMP": return "leaping";
			case "LEVITATION": return "levitation";
			case "LUCK": return "luck";
			case "MUNDANE": return "mundane";
			case "NIGHT_VISION": return "night_vision";
			case "POISON": return "poison";
			case "REGEN": return "regeneration";
			case "SLOWNESS": return "slowness";
			case "SLOW_FALLING": return "slow_falling";
			case "SPEED": return "swiftness";
			case "STRENGTH": return "strength";
			case "THICK": return "thick";
			case "TURTLE_MASTER": return "turtle_master";
			case "WATER": return "water";
			case "WATER_BREATHING": return "water_breathing";
			case "WEAKNESS": return "weakness";
			case "UNCRAFTABLE": default: return "empty";
		}
	}
	
	private static Method getGameProfileFromSkull = null, getGameProfileFromSkullMeta = null, getNameFromProfile = null;
	static{
		try{
			getGameProfileFromSkull = Class.forName("net.evmodder.EvLib.extras.HeadUtils").getMethod("getGameProfile", Skull.class);
			getGameProfileFromSkullMeta = Class.forName("net.evmodder.EvLib.extras.HeadUtils").getMethod("getGameProfile", SkullMeta.class);
			getNameFromProfile = Class.forName("com.mojang.authlib.GameProfile").getMethod("getName");
		}
		catch(ClassNotFoundException | NoSuchMethodException | SecurityException e){}
	}
	private static String getProfileName(Skull skull){
		if(getNameFromProfile != null && getGameProfileFromSkull != null){
			try{return (String)getNameFromProfile.invoke(getGameProfileFromSkull.invoke(null, skull));}
			catch(IllegalAccessException | IllegalArgumentException | InvocationTargetException e){}
		}
		return skull.getOwningPlayer().getName();
	}
	private static String getProfileName(SkullMeta meta){
		if(getNameFromProfile != null && getGameProfileFromSkull != null){
			try{return (String)getNameFromProfile.invoke(getGameProfileFromSkullMeta.invoke(null, meta));}
			catch(IllegalAccessException | IllegalArgumentException | InvocationTargetException e){}
		}
		return meta.getOwningPlayer().getName();
	}
	public static TranslationComponent getLocalizedDisplayName(BlockState block){
		switch(block.getType()){
			case PLAYER_HEAD:
			case PLAYER_WALL_HEAD:
				//Bukkit.getLogger().warning("profile name: "+HeadUtils.getGameProfile((Skull)item.getItemMeta()).getName());
				return new TranslationComponent("block.minecraft.player_head.named", new RawTextComponent(getProfileName((Skull)block)));
			case BLACK_BANNER:
			case BLUE_BANNER:
			case BROWN_BANNER:
			case CYAN_BANNER:
			case GRAY_BANNER:
			case GREEN_BANNER:
			case LIGHT_BLUE_BANNER:
			case LIGHT_GRAY_BANNER:
			case LIME_BANNER:
			case MAGENTA_BANNER:
			case ORANGE_BANNER:
			case PINK_BANNER:
			case PURPLE_BANNER:
			case RED_BANNER:
			case WHITE_BANNER:
			case YELLOW_BANNER:
				return new TranslationComponent("block.minecraft.banner"+((Banner)block).getPattern(0).getPattern().name().toLowerCase()
						+"."+((Banner)block).getBaseColor().name().toLowerCase());
			default:
				return new TranslationComponent("block.minecraft."+block.getType().name().toLowerCase()); 
		}
	}
	public static Component getLocalizedDisplayName(ItemStack item){
		if(item.hasItemMeta() && item.getItemMeta().hasDisplayName()) return new RawTextComponent(item.getItemMeta().getDisplayName());
		if(item.getType().isBlock()){
			if(item.hasItemMeta() && item.getItemMeta() instanceof BlockStateMeta){
				return getLocalizedDisplayName(((BlockStateMeta)item.getItemMeta()).getBlockState());
			}
			switch(item.getType()){
				case PLAYER_HEAD:
				case PLAYER_WALL_HEAD:
					//Bukkit.getLogger().warning("profile name: "+HeadUtils.getGameProfile((SkullMeta)item.getItemMeta()).getName());
					return new TranslationComponent("block.minecraft.player_head.named", new RawTextComponent(getProfileName((SkullMeta)item.getItemMeta())));
				default:
					return new TranslationComponent("block.minecraft."+item.getType().name().toLowerCase());
			}
		}
		switch(item.getType()){
			case POTION:
			case SPLASH_POTION:
			case LINGERING_POTION:
			case TIPPED_ARROW:
				return new TranslationComponent("item.minecraft."+item.getType().name().toLowerCase()+".effect."+(item.hasItemMeta()
								? getVanillaPotionEffectTypeName(((PotionMeta)item.getItemMeta()).getBasePotionData().getType().getEffectType())
								: "empty"
							));
			case SHIELD:
				if(item.hasItemMeta()) return new TranslationComponent("item.minecraft.shield."
						+((Banner)((BlockStateMeta)item.getItemMeta()).getBlockState()).getBaseColor().name().toLowerCase());
			case WRITTEN_BOOK:
				return new RawTextComponent(((BookMeta)item.getItemMeta()).getTitle());//TODO: book.getTitleComponent()?
			default:
				return new TranslationComponent("item.minecraft."+item.getType().name().toLowerCase()); 
		}
	}

	public final static class ScoreComponent extends Component{
		final Object selector;
		final Objective objective;
		String value; // Optional; overwrites output of score selector
		public ScoreComponent(Object selector, Objective objective){this.selector = selector; this.objective = objective;}
		public ScoreComponent(String name, Objective objective){this.selector = name; this.objective = objective;}
		public ScoreComponent(Object selector, Objective objective, String value,
				String insert, TextClickAction click, TextHoverAction hover, String color, Map<Format, Boolean> formats){
			super(insert, click, hover, color, formats);
			this.selector = selector;
			this.objective = objective;
			this.value = value;
		}
		//tellraw @a {"score":{"name":"@p","objective":"levels","value":"3333"}}

		@Override public String toPlainText(){
			String name = null;
			try{
				UUID uuid = UUID.fromString(selector.toString());
				name = Bukkit.getEntity(uuid).getName();
			}
			catch(IllegalArgumentException ex){};
			try{
				Class<?> clazz = Class.forName("net.evmodder.EvLib.extras.SelectorUtils.Selector");
				@SuppressWarnings("unchecked")
				Collection<Entity> entities = (Collection<Entity>)clazz.getMethod("resolve").invoke(selector);
				if(entities.size() > 1) return "ERROR: more than 1 entity matched with score selector!";
				if(entities.isEmpty()) return "";
				name = entities.iterator().next().getName();
			}
			catch(Exception ex){name = selector.toString();}
			if(name == null) return "";
			return ""+objective.getScore(name).getScore();
		}
		@Override public String toString(){
			StringBuilder builder = new StringBuilder().append("\"score\":{\"name\":\"")
					.append(selector.toString()).append("\",\"objective\":\"").append(objective.getName()).append('"');
			if(value != null) builder.append(",\"value\":\"").append(TextUtils.escape(value, "\"","\n")).append('"');
			return builder.append('}').append(getProperties()).append('}').toString();
		}
		@Override ScoreComponent copyWithNewProperties(String insert, TextClickAction click, TextHoverAction hover, String color, Map<Format, Boolean> formats){
			return new ScoreComponent(selector, objective, value, insert, click, hover, color, formats);
		}
	}
	public final static class SelectorComponent extends Component{
//		final Selector selector;
		final Object selector;
		final boolean useDisplayNameInToPlaintext;
		public SelectorComponent(Object selector){this.selector = selector; this.useDisplayNameInToPlaintext = true;}
		public SelectorComponent(UUID uuid){this.selector = uuid; this.useDisplayNameInToPlaintext = true;}
		public SelectorComponent(Object selector, boolean useDisplayName){this.selector = selector; useDisplayNameInToPlaintext = useDisplayName;}
		public SelectorComponent(Object selector, String insert, TextClickAction click, TextHoverAction hover, String color, Map<Format, Boolean> formats){
			super(insert, click, hover, color, formats);
			this.selector = selector; this.useDisplayNameInToPlaintext = true;
		}
//		public SelectorComponent(SelectorType type, SelectorArgument...arguments){this.selector = new Selector(type, arguments);}
		//tellraw @a {"selector":"@a"}

		@Override public String toPlainText(){
			Collection<String> names = null;
			try{
				UUID uuid = selector instanceof UUID ? (UUID)selector : UUID.fromString(selector.toString());
				Entity entity = Bukkit.getEntity(uuid);
				if(entity != null) names = Arrays.asList(getLocalizedDisplayName(entity, useDisplayNameInToPlaintext).toPlainText());
			}
			catch(IllegalArgumentException ex){};
			if(names == null) try{
				Class<?> clazz = Class.forName("net.evmodder.EvLib.extras.SelectorUtils.Selector");
				@SuppressWarnings("unchecked")
				Collection<Entity> entities = (Collection<Entity>)clazz.getMethod("resolve").invoke(selector);
				names = entities.stream().filter(e -> e != null)
						.map(e -> getLocalizedDisplayName(e, useDisplayNameInToPlaintext).toPlainText()).collect(Collectors.toList());
			}
			catch(Exception ex){names = Arrays.asList(selector.toString());}
			return String.join(ChatColor.GRAY+", "+ChatColor.RESET, names);
		}
		@Override public String toString(){
			return new StringBuilder().append("{\"selector\":\"").append(TextUtils.escape(selector.toString(), "\"","\n"))
					.append(getProperties()).append("\"}").toString();
		}
		@Override SelectorComponent copyWithNewProperties(String insert, TextClickAction click, TextHoverAction hover, String color, Map<Format, Boolean> formats){
			return new SelectorComponent(selector, insert, click, hover, color, formats);
		}
	}
	public final static class KeybindComponent extends Component{
		final Keybind keybind;
		public KeybindComponent(Keybind keybind){this.keybind = keybind;}
		public KeybindComponent(Keybind keybind, String insert, TextClickAction click, TextHoverAction hover, String color, Map<Format, Boolean> formats){
			super(insert, click, hover, color, formats);
			this.keybind = keybind;
		}
		//tellraw @a {"keybind":"of.key.zoom"}
		@Override public String toPlainText(){return keybind.toString();}//TODO: KEY SETTING NAME HERE if possible?
		@Override public String toString(){
			return new StringBuilder().append("{\"keybind\":\"").append(keybind).append('"').append(getProperties()).append('}').toString();
		}
		@Override KeybindComponent copyWithNewProperties(String insert, TextClickAction click, TextHoverAction hover, String color, Map<Format, Boolean> formats){
			return new KeybindComponent(keybind, insert, click, hover, color, formats);
		}
	}

	public final static class ListComponent extends Component{
		@Override String getInsertion(){return components.isEmpty() ? null : components.get(0).getInsertion();}
		@Override TextClickAction getClickAction(){return components.isEmpty() ? null : components.get(0).getClickAction();}
		@Override TextHoverAction getHoverAction(){return components.isEmpty() ? null : components.get(0).getHoverAction();}
		@Override public String getColor(){return components.isEmpty() ? null : components.get(0).getColor();}
		@Override public Map<Format, Boolean> getFormats(){return components.isEmpty() ? null : components.get(0).getFormats();}
		Component last = null;
		List<Component> components;
		public ListComponent(Component...components){
			this.components = new ArrayList<>();
			for(Component comp : components) addComponent(comp);
		}
		public boolean isEmpty(){return components.isEmpty();}

		private RawTextComponent copyWithNewText(RawTextComponent comp, String text){
			return new RawTextComponent(text, comp.getInsertion(), comp.getClickAction(), comp.getHoverAction(), comp.getColor(), comp.getFormats());
		}
		public boolean addComponent(Component component){
			// Currently the only component is just properties, so see if we can delete it and move the properties to the new component
			if(components.size() == 1 && last.toPlainText().isEmpty() && last.isPropertiesSupersetOf(component)){
				components.set(0, last=component.copyWithNewProperties(
						last.getInsertion(), last.getClickAction(), last.getHoverAction(), last.getColor(), last.getFormats()));
				return true;
			}
			// If last==null, components[] is empty and we are willing to accept an empty component to set the list properties 
			if(component.toPlainText().isEmpty() && last != null) return false;
			if(component instanceof RawTextComponent && last != null){
				if(ChatColor.stripColor(component.toPlainText()).isEmpty()) return false;
				if(last instanceof RawTextComponent && (last.samePropertiesAs(component)
						|| (components.size() == 1 && last.isPropertiesSupersetOf(component))
				)){
					components.remove(components.size()-1);
					components.add(last = copyWithNewText((RawTextComponent)last, last.toPlainText() + component.toPlainText()));
					return true;
				}
			}
			// For TranslationComponents that are actually just String formatters, not translation keys.
			if(component instanceof TranslationComponent && last != null && last.samePropertiesAs(component)){
				final Component strFormatComp = ((TranslationComponent)component).convertStringFormatters();
				if(!(strFormatComp instanceof TranslationComponent)) return addComponent(strFormatComp);
			}
			if(component instanceof ListComponent){
				// We can safely flatten nested TellrawBlobs IFF they don't override any of the parent's "group properties"..
				// AND we are not inside a "with":[]
				if(((ListComponent)component).components.size() <= 1/* || noOverridingProperties(component)*/){
					for(Component comp : ((ListComponent)component).components) addComponent(comp);
					return true;
				}
			}
			return components.add(last = component);
		}
		public boolean addComponent(String text){return addComponent(new RawTextComponent(text));}

		/**
		 * Loops through all RawTextComponents in this instance and replaces all occurances of @textToReplace with the @replacement component
		 * @param textToReplace The simple text from inside a RawTextComponent to search for
		 * @param replacement The component substituted in place of each instance of matching text
		 * @return true if one or more replacements occurred
		 */
		public boolean replaceRawDisplayTextWithComponent(final String textToReplace, final Component replacement){
			if(textToReplace.isEmpty()) return false;
			boolean updated = false;
			for(int i=0; i<components.size(); ++i){
				Component comp = components.get(i);
				if(comp instanceof ListComponent){
					if(((ListComponent)comp).replaceRawDisplayTextWithComponent(textToReplace, replacement)) updated = true;
				}
				if(comp instanceof RawTextComponent == false) continue;
				RawTextComponent txComp = (RawTextComponent) comp;
				final String text = txComp.toPlainText();
				if(text.contains(textToReplace) == false) continue;
				boolean replacementIsRawText = replacement instanceof RawTextComponent;

				if(replacementIsRawText && txComp.isPropertiesSupersetOf(replacement)){
					components.set(i, copyWithNewText(txComp, text.replace(textToReplace, ((RawTextComponent)replacement).toPlainText())));
					continue;
				}
				int matchIdx = text.indexOf(textToReplace);
				String textBefore = text.substring(0, matchIdx);
				String textAfter = text.substring(matchIdx+textToReplace.length());
				boolean emptyBefore = (replacementIsRawText ? ChatColor.stripColor(textBefore) : textBefore).isEmpty();
				boolean emptyAfter = (replacementIsRawText ? ChatColor.stripColor(textAfter) : textAfter).isEmpty();
				// Necessary to prevent overriding this ListComponent's group properties
				if(i == 0 && emptyBefore && !this.samePropertiesAs(replacement)){components.add(0, copyWithNewText(txComp, "")); i = 1;}

				Component thisReplacement = replacement;
				if(replacementIsRawText){
					if(emptyBefore) thisReplacement = copyWithNewText((RawTextComponent)thisReplacement, textBefore + thisReplacement.toPlainText());
					if(emptyAfter) thisReplacement = copyWithNewText((RawTextComponent)thisReplacement, thisReplacement.toPlainText() + textAfter);
				}
				if(!emptyBefore){
					RawTextComponent propertiesAtReplacement = getCurrentColorAndFormatProperties(textBefore);
					if(!this.isPropertiesSupersetOf(propertiesAtReplacement)){
						ListComponent subListComp = new ListComponent();
						subListComp.addComponent(propertiesAtReplacement);
						subListComp.addComponent(thisReplacement);
						thisReplacement = subListComp;
					}
				}
				if(emptyBefore && emptyAfter){
					if(i == components.size()-1) last = thisReplacement;
					components.set(i, thisReplacement);
				}
				else if(emptyBefore){
					components.set(i, copyWithNewText(txComp, textAfter));
					components.add(i, thisReplacement);
				}
				else if(emptyAfter){
					components.set(i, new RawTextComponent(textBefore));
					if(++i == components.size()) components.add(last = thisReplacement);
					else components.add(i, thisReplacement);
				}
				else{
					components.set(i, copyWithNewText(txComp, textBefore));
					RawTextComponent textAfterComp = copyWithNewText(txComp, textAfter);
					if(++i == components.size()){components.add(thisReplacement); components.add(last = textAfterComp);}
					else{components.add(i, textAfterComp); components.add(i, thisReplacement);}
				}
				updated = true;
			}
			return updated;
		}

		/** If the first component is properties-only and all those properties are overridden, then we can discard it. */
		private boolean canDiscardFirstComponent(){
			if(components.size() > 1 && components.get(0).toPlainText().isEmpty() && components.get(1).overridesAllPropertiesOf(components.get(0))){
				for(int i=2; i<components.size(); ++i){
					if(!components.get(i).overridesAllPropertiesOf(components.get(1))) return false;
				}
				return true;
			}
			return false;
		}

		@Override public String toPlainText(){
			StringBuilder builder = new StringBuilder();
			for(Component comp : components) builder.append(comp.toPlainText());
			return builder.toString();
		}
		@Override public String toString(){
			while(last instanceof RawTextComponent && ChatColor.stripColor(last.toPlainText()).isEmpty()){
				components.remove(components.size()-1);
				last = components.isEmpty() ? null : components.get(components.size()-1);
			}
			if(canDiscardFirstComponent()) components.remove(0);
			switch(components.size()){
				case 0: return "\"\"";
				case 1: return components.get(0).toString();
				default: return new StringBuilder().append('[').append(
							components.stream().map(Component::toString).collect(Collectors.joining(","))
						).append(']').toString();
			}
		}
		@Override ListComponent copyWithNewProperties(String insert, TextClickAction click, TextHoverAction hover, String color, Map<Format, Boolean> formats){
			ListComponent newListComp = new ListComponent(new RawTextComponent("", insert, click, hover, color, formats));
			components.forEach(comp -> newListComp.addComponent(comp));
			return newListComp;
		}
	}

	public final static ListComponent convertHexColorsToComponentsWithReset(String str){
		// ยงxยง0ยง0ยง0ยง0ยง0ยง0 
		Matcher matcher = Pattern.compile("ยงx((?:ยง[0-9a-fA-F]){6})(?:[^ยง]|(?:ยง[k-o]))+").matcher(str);
		ListComponent comp = new ListComponent();
		int lastEnd = 0;
		while(matcher.find()){
			comp.addComponent(new RawTextComponent(str.substring(lastEnd, matcher.start())));
			String color = "#"+matcher.group(1).replace("ยง", "");
			comp.addComponent(new RawTextComponent(matcher.group().substring(14), /*insert=*/null, /*click=*/null, /*hover=*/null, color, /*formats=*/null));
			lastEnd = matcher.end();
		}
		comp.addComponent(new RawTextComponent(str.substring(lastEnd)));
		return comp;
	}

	private static class Pair<T, R>{
		public final T a; public final R b;
		public Pair(T t, R r){a=t; b=r;}
	}
	private final static Pair<String, Integer> parseColonThenSimpleString(String str, int i){
		while(Character.isWhitespace(str.charAt(i))) ++i;
		if(str.charAt(i) != ':'){
			Bukkit.getLogger().warning("TellrawUtils ERROR: expected : at index "+i+" of string: "+str);
			return null;
		}
		++i;
		while(Character.isWhitespace(str.charAt(i))) ++i;
		if(str.charAt(i) != '"'){
			Bukkit.getLogger().warning("TellrawUtils ERROR: expected \" at index "+i+" of string: "+str);
			return null;
		}
		int j = ++i;
		for(; str.charAt(j) != '"' || TextUtils.isEscaped(str, j); ++j);
		String simpleStr = str.substring(i, j);
		return new Pair<>(simpleStr, j + 1);
	}
	private final static Pair<Boolean, Integer> parseColonThenBoolean(String str, int i){
		while(Character.isWhitespace(str.charAt(i))) ++i;
		if(str.charAt(i) != ':'){
			Bukkit.getLogger().warning("TellrawUtils ERROR: expected : at index "+i+" of string: "+str);
			return null;
		}
		++i;
		while(Character.isWhitespace(str.charAt(i))) ++i;
		if(str.substring(i, i+4).toLowerCase().equals("true")) return new Pair<>(true, i+4);
		if(str.substring(i, i+5).toLowerCase().equals("false")) return new Pair<>(false, i+5);
		Bukkit.getLogger().warning("TellrawUtils ERROR: expected true/false at index "+i+" of string: "+str);
		return null;
	}
	private final static Pair<Component, Integer> parseListComponent(String str, int i, Component insert_comp0){
		//while(i < str.length() && Character.isWhitespace(str.charAt(i))) ++i;
		if(str.charAt(i) != '['){
			Bukkit.getLogger().warning("TellrawUtils ERROR: expected [ at index "+i+" of string: "+str);
			return null;
		}
		ListComponent listComp = new ListComponent();
		if(insert_comp0 != null) listComp.addComponent(insert_comp0);
//		if(str.charAt('i') == ']') return comp; //TODO: Apparently empty lists are not supported in tellraw (1.18)
		do{
			++i;
			Pair<Component, Integer> nextComp = parseNextComponentFromString(str, i);
			if(nextComp == null || nextComp.a == null) return null;
			listComp.addComponent(nextComp.a);
			i = nextComp.b;
			while(Character.isWhitespace(str.charAt(i))) ++i;
		} while(str.charAt(i) == ',');
		if(str.charAt(i) != ']'){
			Bukkit.getLogger().warning("TellrawUtils ERROR: expected ] at index "+i+" of string: "+str);
			return null;
		}
		return new Pair<>(listComp, i + 1);
	}
	enum ComponentType{TEXT, TRANSLATE, SCORE, SELECTOR, KEYBIND};
	private final static Pair<Component, Integer> parseNextComponentFromString(String str, int i){
		while(i < str.length() && Character.isWhitespace(str.charAt(i))) ++i;
		if(i == str.length()) return null;
		switch(str.charAt(i)){
			case '[':
				return parseListComponent(str, i, /*insert_comp0=*/null);
			case '"': {
				int j;
				for(j = ++i; str.charAt(j) != '"' || TextUtils.isEscaped(str, j); ++j);
				return new Pair<>(new RawTextComponent(str.substring(i, j)), j + 1);
			}
			case '{': {
				String insert = null;
				TextClickAction click = null;
				TextHoverAction hover = null;
				String color = null;
				TreeMap<Format, Boolean> formats = new TreeMap<>(); // Using TreeMap instead of HashMap because sorting is nice
				ComponentType type = null;
				String text = null;
				String jsonKey = null;
				Component[] with = null;
				Keybind keybind = null;
				Object selector = null;
				Objective objective = null;
				String value = null;
				//ListComponent extra = null;
				Integer extraListStart = null;
				do{ // while(str.charAt(i) != '}')
					++i;
					while(Character.isWhitespace(str.charAt(i))) ++i;
					if(str.charAt(i) != '"'){
						Bukkit.getLogger().warning("TellrawUtils ERROR parsing component at index "+i+" from string: "+str);
						return null;
					}
					++i;
					ComponentType newType = null;
					if(str.startsWith("extra\"", i)){
						i += 6;
						while(Character.isWhitespace(str.charAt(i))) ++i;
						if(str.charAt(i) != ':'){
							Bukkit.getLogger().warning("TellrawUtils ERROR: expected : at index "+i+" of string: "+str);
							return null;
						}
						++i;
						while(Character.isWhitespace(str.charAt(i))) ++i;
						extraListStart = i;
						Pair<Component, Integer> extraAndIdx = parseListComponent(str, i, /*insert_comp0*/null);
						if(extraAndIdx == null) return null;
						//extra = (ListComponent)extraAndIdx.a;
						i = extraAndIdx.b;
					}
					else if(str.startsWith("color\"", i)){
						i += 6;
						Pair<String, Integer> textAndIdx = parseColonThenSimpleString(str, i);
						if(textAndIdx == null) return null;
						color = textAndIdx.a;
						i = textAndIdx.b;
					}
					else if(str.startsWith("bold\"", i)){
						i += 5;
						Pair<Boolean, Integer> boolAndIdx = parseColonThenBoolean(str, i);
						if(boolAndIdx == null) return null;
						formats.put(Format.BOLD, boolAndIdx.a);
						i = boolAndIdx.b;
					}
					else if(str.startsWith("italic\"", i)){
						i += 7;
						Pair<Boolean, Integer> boolAndIdx = parseColonThenBoolean(str, i);
						if(boolAndIdx == null) return null;
						formats.put(Format.ITALIC, boolAndIdx.a);
						i = boolAndIdx.b;
					}
					else if(str.startsWith("underlined\"", i)){
						i += 11;
						Pair<Boolean, Integer> boolAndIdx = parseColonThenBoolean(str, i);
						if(boolAndIdx == null) return null;
						formats.put(Format.UNDERLINED, boolAndIdx.a);
						i = boolAndIdx.b;
					}
					else if(str.startsWith("strikethrough\"", i)){
						i += 14;
						Pair<Boolean, Integer> boolAndIdx = parseColonThenBoolean(str, i);
						if(boolAndIdx == null) return null;
						formats.put(Format.STRIKETHROUGH, boolAndIdx.a);
						i = boolAndIdx.b;
					}
					else if(str.startsWith("obfuscated\"", i)){
						i += 11;
						Pair<Boolean, Integer> boolAndIdx = parseColonThenBoolean(str, i);
						if(boolAndIdx == null) return null;
						formats.put(Format.OBFUSCATED, boolAndIdx.a);
						i = boolAndIdx.b;
					}
					else if(str.startsWith("insertion\"", i)){
						i += 10;
						Pair<String, Integer> textAndIdx = parseColonThenSimpleString(str, i);
						if(textAndIdx == null) return null;
						insert = textAndIdx.a;
						i = textAndIdx.b;
					}
					else if(str.startsWith("with\"", i)){
						i += 5;
						while(Character.isWhitespace(str.charAt(i))) ++i;
						if(str.charAt(i) != ':'){
							Bukkit.getLogger().warning("TellrawUtils ERROR: expected : at index "+i+" of string: "+str);
							return null;
						}
						++i;
						Pair<Component, Integer> withAndIdx = parseNextComponentFromString(str, i);
						if(withAndIdx == null) return null;
						with = ((ListComponent)withAndIdx.a).components.toArray(new Component[0]);
						i = withAndIdx.b;
					}
					// Content tags are checked in the order: text, translate, score, selector, keybind, nbt
					else if(str.startsWith("text\"", i)){
						newType = ComponentType.TEXT;
						i += 5;
						Pair<String, Integer> textAndIdx = parseColonThenSimpleString(str, i);
						if(textAndIdx == null) return null;
						text = textAndIdx.a;
						i = textAndIdx.b;
					}
					else if(str.startsWith("translate\"", i)){
						newType = ComponentType.TRANSLATE;
						i += 10;
						Pair<String, Integer> textAndIdx = parseColonThenSimpleString(str, i);
						if(textAndIdx == null) return null;
						jsonKey = textAndIdx.a;
						i = textAndIdx.b;
					}
					else if(str.startsWith("score\"", i)){
						newType = ComponentType.SCORE;
						i += 6;
						while(Character.isWhitespace(str.charAt(i))) ++i;
						if(str.charAt(i) != ':'){
							Bukkit.getLogger().warning("TellrawUtils ERROR: expected : at index "+i+" of string: "+str);
							return null;
						}
						++i;
						while(Character.isWhitespace(str.charAt(i))) ++i;
						if(str.charAt(i) != '{'){
							Bukkit.getLogger().warning("TellrawUtils ERROR: expected { at index "+i+" of string: "+str);
							return null;
						}
						do{
							++i;
							while(Character.isWhitespace(str.charAt(i))) ++i;
							if(str.charAt(i) != '"'){
								Bukkit.getLogger().warning("TellrawUtils ERROR: expected \" at index "+i+" of string: "+str);
								return null;
							}
							++i;
							if(str.startsWith("name\"", i)){
								i += 5;
								Pair<String, Integer> textAndIdx = parseColonThenSimpleString(str, i);
								if(textAndIdx == null) return null;
								selector = TextUtils.unescapeString(textAndIdx.a);
								i = textAndIdx.b;
							}
							else if(str.startsWith("objective\"", i)){
								i += 10;
								Pair<String, Integer> textAndIdx = parseColonThenSimpleString(str, i);
								if(textAndIdx == null) return null;
								objective = Bukkit.getServer().getScoreboardManager().getMainScoreboard().getObjective(
										TextUtils.unescapeString(textAndIdx.a));
								i = textAndIdx.b;
							}
							else if(str.startsWith("value\"", i)){
								i += 6;
								Pair<String, Integer> textAndIdx = parseColonThenSimpleString(str, i);
								if(textAndIdx == null) return null;
								value = TextUtils.unescapeString(textAndIdx.a);
								i = textAndIdx.b;
							}
							while(Character.isWhitespace(str.charAt(i))) ++i;
						} while(str.charAt(i) == ',');
						if(str.charAt(i) != '}'){
							Bukkit.getLogger().warning("TellrawUtils ERROR: expected } at index "+i+" of string: "+str);
							return null;
						}
						++i;
					}
					else if(str.startsWith("selector\"", i)){
						newType = ComponentType.SELECTOR;
						i += 9;
						Pair<String, Integer> textAndIdx = parseColonThenSimpleString(str, i);
						if(textAndIdx == null) return null;
						selector = TextUtils.unescapeString(textAndIdx.a);
						i = textAndIdx.b;
					}
					else if(str.startsWith("keybind\"", i)){
						newType = ComponentType.KEYBIND;
						i +=8;
						Pair<String, Integer> textAndIdx = parseColonThenSimpleString(str, i);
						if(textAndIdx == null) return null;
						String keybindStr = textAndIdx.a;
						for(Keybind k : Keybind.values()) if(k.toString().equals(keybindStr)) keybind = k;
						i = textAndIdx.b;
					}
					// TODO: else if(str.startsWith("nbt\"", i)){
					else{
						Bukkit.getLogger().warning("TellrawUtils ERROR: unknown comp-key at index "+i+" of : "+str);
						return null;
					}
					if(newType != null){
						if(type != null) Bukkit.getLogger().warning("TellrawUtils MULTIPLE-TYPES parsing component at index "+i+" from string: "+str);
						type = newType;
					}
					while(Character.isWhitespace(str.charAt(i))) ++i;
				} while(str.charAt(i) == ',');
				if(str.charAt(i) != '}'){
					Bukkit.getLogger().warning("TellrawUtils ERROR: expected } at index "+i+" of string: "+str);
					return null;
				}
				if(formats.isEmpty()) formats = null;
				Component comp = null;
				if(type == null){
					Bukkit.getLogger().warning("TellrawUtils UNKNOWN TYPE parsing component at index "+i+" from string: "+str);
					return null;
				}
				switch(type){
					case TEXT: comp = new RawTextComponent(text, insert, click, hover, color, formats); break;
					case TRANSLATE: comp = new TranslationComponent(jsonKey, with, insert, click, hover, color, formats); break;
					case SCORE: comp = new ScoreComponent(selector, objective, value, insert, click, hover, color, formats); break;
					case SELECTOR: comp = new SelectorComponent(selector, insert, click, hover, color, formats); break;
					case KEYBIND: comp = new KeybindComponent(keybind, insert, click, hover, color, formats); break;
				}
				++i;
				if(extraListStart == null) return new Pair<>(comp, i);
				else return new Pair<>(parseListComponent(str, extraListStart, comp).a, i);
			}
			default:
				Bukkit.getLogger().warning("TellrawUtils ERROR parsing component at index "+i+" from string: "+str);
				return null;
		}
	}
	public final static Component parseComponentFromString(String str){
		Pair<Component, Integer> compAndIdx = parseNextComponentFromString(str, 0);
		return compAndIdx == null ? null : compAndIdx.a;
	}
}